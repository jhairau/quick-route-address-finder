name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Run full test suite
        run: |
          npm run lint
          npm run test:coverage
          npm run build

      - name: Validate version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

          # Check if version already exists
          if git tag | grep -q "^v$VERSION$"; then
            echo "❌ Version v$VERSION already exists"
            exit 1
          fi

          echo "✅ Version $VERSION is valid and available"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.dry_run == 'false'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Update version in package.json
        run: |
          VERSION="${{ github.event.inputs.version }}"
          npm version $VERSION --no-git-tag-version

      - name: Build package
        run: npm run build

      - name: Create tag (without pushing to main)
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git add package.json package-lock.json
          git commit -m "chore: bump version to $VERSION [skip ci]"
          git tag "v$VERSION"
          # Only push the tag, not the main branch
          git push origin "v$VERSION"

      - name: Publish to NPM
        run: |
          VERSION="${{ github.event.inputs.version }}"

          if [[ "${{ github.event.inputs.prerelease_tag }}" != "" ]]; then
            npm publish --tag ${{ github.event.inputs.prerelease_tag }}
            echo "📦 Published $VERSION to NPM with tag: ${{ github.event.inputs.prerelease_tag }}"
          else
            npm publish
            echo "📦 Published $VERSION to NPM (latest)"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            # Release ${{ github.event.inputs.version }}

            This release was created manually using GitHub Actions.

            **Release Type:** ${{ github.event.inputs.release_type }}
            ${{ github.event.inputs.prerelease_tag && format('**Prerelease Tag:** {0}', github.event.inputs.prerelease_tag) || '' }}

            ## Installation

            ```bash
            npm install quick-route-address-finder@${{ github.event.inputs.version }}
            ```

            ## What's Changed

            See the [commit history](https://github.com/${{ github.repository }}/commits/v${{ github.event.inputs.version }}) for detailed changes.

            ---

            📦 [View on NPM](https://www.npmjs.com/package/quick-route-address-finder/v/${{ github.event.inputs.version }})
          draft: false
          prerelease: ${{ github.event.inputs.prerelease_tag != '' }}

  dry-run:
    name: Dry Run
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.dry_run == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Build package
        run: npm run build

      - name: Test NPM publish (dry run)
        run: npm publish --dry-run

      - name: Summary
        run: |
          echo "## 🧪 Dry Run Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Prerelease Tag:** ${{ github.event.inputs.prerelease_tag || 'none' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks passed! Ready for actual release." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To create the actual release, run this workflow again with 'Dry run' unchecked." >> $GITHUB_STEP_SUMMARY
